#!/usr/bin/perl

use strict;
use warnings;
use DBI;

$|=1;


our @nodes = ();
our $node = "node";

sub parsenodes
{
    my $topofile=shift;
    my $fh = new IO::File($topofile);
    while(<$fh>)
    {
        if ($_ !~ /net\.node/)
        {
            next;
        }
	my $state = 0;
        my @items = split /[\,\[\]\'\s]+/, $_;
        for my $i (@items)
        {
           if ($i eq "for" && $state == 0)
           {
                $state = 1;
           }
           elsif ($i eq "name" && $state == 1)
           {
                $state = 2;
           }
           elsif ($i eq "in" && $state == 2)
           {
                $state = 3;
           }
           elsif($state == 3)
           {
               push(@nodes, $i);
	       if ($node eq "node")
               {
                   $node = $i;
               }
           }
        }
    }
}

sub randompass()
{
	my @alphanumeric = ('a'..'z', 'A'..'Z', 0..9,'!','_','-');
	my @numeric = (0..9);
	my $randpassword = '';

	while ( length($randpassword) < 8 ) {
              $randpassword = $randpassword . join '', map $alphanumeric[rand @alphanumeric], 0..(rand @numeric);
	}
	$randpassword .= '#';
	return $randpassword;
}

# Flow is very similar to startvm. We will
# create any new accounts if needed, will
# join them into the project, will try to
# connect to XDC and recreate it if connection
# failed, will restart experiment if needed,
# and will reattach. XDC create, attach and
# startexp will be retried RETRIES times.

my $RETRIES = 3;
my $SSH = "ssh -o StrictHostKeyChecking=no";
    
# Take paper ID, type of VM to create
# and a list of IDs that need access
# like startvm 2 small 4 2 1

my $usage="$0 paper-ID vm-type vnc-pass contact-IDs\n";
my %opt = ();


if ($#ARGV < 3)
{
    print $usage;
    print "DONE";
    exit 1;
}

# Read info from conf/options.php
# to get orgName, dbUser, etc.
my $fh = new IO::File("conf/options.php");
while (<$fh>)
{
    if ($_ =~ /\$Opt/ && $_ =~ /\=/)
    {
	my @arr = split /[\[\]\"\=\s+\;]/, $_;	
	if ($#arr > 3)
	{
	    my $intake = 0;
	    for my $a (@arr)
	    {
		if ($a !~ /[\[\]\"\=\s+]/ && $a =~ /[a-zA-Z0-9]/)
		{
		    if ($a =~ /^\$Opt/)
		    {
			$intake = 1;
			next;
		    }
		    if ($intake =~ /^[0-9]$/ && $intake == 1)
		    {
			$opt{$a} = 0;
			$intake = $a;
		    }
		    else
		    {
			$opt{$intake} = $a;
			last;
		    }
		}
	    }
	}
    }
}
close($fh);

my %vms=();
# Read VM descriptions from file
$fh = new IO::File($opt{'clusterVMs'});
while (<$fh>)
{
    my @items= split /\|/, $_;
    $items[1] =~ s/\n//;
    $vms{$items[0]} = $items[1];
}
close($fh);

my $dsn = "DBI:mysql:database=$opt{'dbName'}";
my $dbh = DBI->connect($dsn, $opt{'dbUser'}, $opt{'dbPassword'});
my $sth;
my %tocreate=();
my $paperID = $ARGV[0];
my $vmtype = $ARGV[1];
my $vncpass = $ARGV[2];
my $path=$opt{'webpath'} . "/secret";
$ENV{HOME}=$path;
print "HOME is " . $ENV{HOME} . "\n";

# Set server
my $cmd="mrg config set server grpc.mod.deterlab.net";
system($cmd);
# Create a project for paper if it does not exist
my $logincmd =  "mrg login " . $opt{'clusterUser'} . " -p \"" . $opt{'clusterPass'} . "\" 2>&1";
# Log in as conf admin and as www-data user
$cmd = $logincmd;
my $result=system($cmd);
# Log in as conf admin and as merge user
$cmd = "sudo -H -u merge " . $logincmd;
my $result=system($cmd);
# Check if project exists, and create if it does not
my $proj = $opt{'clusterOrg'} . "p" . $paperID;
my $vmid = "$vmtype.$proj";
$cmd = "mrg show project $proj";
my $result = system($cmd);
if ($result != 0)
{
    print "Project $proj does not exist. Please go back to the paper page to start a VM for this paper.\n";
    print "DONE";
    exit 1;
}
my $config = "$path/config";
my $admin=$opt{'clusterUser'};
open(my $oh, '>', $config) or die $!;
print $oh "
Host *
     IdentityFile $path/.ssh/merge_key
     ServerAliveInterval 30
     User $admin
     StrictHostKeyChecking no
     ProxyCommand ssh -o StrictHostKeyChecking=no -p 2022 -i $path/.ssh/merge_key -W %h:%p $admin\@jump.mod.deterlab.net";
close($oh);
# Create similar config for merge user
my $mconfig = "/tmp/config";
open(my $oh, '>', $mconfig) or die $!;
print $oh "                                                                                                                                                                                                                           
Host *	
    IdentityFile /home/merge/.ssh/merge_key
    ServerAliveInterval 30
    User $admin
    StrictHostKeyChecking no
    UserKnownHostsFile=/dev/null
    ProxyCommand ssh -o StrictHostKeyChecking=no -p 2022 -i /home/merge/.ssh/merge_key -W %h:%p $admin\@jump.mod.deterlab.net";
close($oh);
# Figure out which cluster accounts we have created before
my $org = $opt{'clusterOrg'};
for (my $i = 3; $i <= $#ARGV; $i++)
{
    my $id = $ARGV[$i];
    my $username = $org . "u" .  $ARGV[$i];
    $sth = $dbh->prepare(
	'SELECT * FROM ClusterUsers WHERE contactID = ?')
	or die "prepare statement failed: $dbh->errstr()";
    $sth->execute($ARGV[$i]) or die "execution failed: $dbh->errstr()";
    # If no account exists according to HotCRP try to create it or re-create it and save
    if ($sth->rows == 0)
    {
	print "Create account for " . $ARGV[$i] . "\n";
	$sth = $dbh->prepare(
	    'SELECT * FROM ContactInfo WHERE contactID = ?')
	    or die "prepare statement failed: $dbh->errstr()";
	$sth->execute($ARGV[$i]) or die "execution failed: $dbh->errstr()";
	while (my $ref = $sth->fetchrow_hashref()) {
	    my $usstate = "";
	    my $firstName = $ref->{'firstName'};
	    my $lastName = $ref->{'lastName'};
	    my $email = $ref->{'email'};
	    my $affiliation = $ref->{'affiliation'};
	    my $country= $ref->{'country'};
	    if ($affiliation eq "")
	    {
		$affiliation = "HotCRP";
	    }
	    if ($country eq "" || $country eq "United States of America")
	    {
		$country = "United States";
	    }
	    if ($country eq "United States")
	    {
		$usstate = "--usstate CA";
	    }
	    my $password = randompass();
	    # Check if the user already exists, and if it does unregister them since we need to generate a new password
	    my $cmd = "mrg show user $username";
	    my $result = system($cmd);
	    if ($result == 0)
	    {
		# Assume that this will work
		$cmd = "mrg delete user $username && mrg unregister $username";
		system($cmd);
		print "Existing user $username has been deleted, and new user will be created";
	    }
	    $cmd = "mrg sudo $username register $username $email \"$firstName $lastName\" \"$affiliation\" Researcher \"$country\" $usstate -p \"$password\" -o $org";
	    # Execute the command in new process
	    $result = system($cmd);
	    if ($result == 0)
	    {
		$cmd =  "mrg membership confirm organization user " . $opt{'clusterOrg'} . " " . $username;
		$result = system($cmd);
		if ($result == 0)
		{
		    print "Successfully registered user $username\n";
		    my $sth1 = $dbh->prepare(
			'INSERT INTO ClusterUsers(contactID, username, password) values (?, ?, ?)')
			or die "prepare statement failed: $dbh->errstr()";
		    $sth1->bind_param(1, $id);
		    $sth1->bind_param(2, $username);
		    $sth1->bind_param(3,$password);
		    $sth1->execute or die "execution failed: $dbh->errstr()";
		    $sth1->finish;
		    # Join user to the project
		    $cmd = "mrg update member project $proj $username";
		    $result = system($cmd);
		    if ($result != 0)
		    {
			print "Membership update for project $proj and user $username failed\n";
		    }
		}
		else
		{
		    print "Registration of $username for email $email has worked but we could not activate the user. Please contact testbed ops.\n";
		}
	    }
	    else
	    {
		print "Registration of $username for email $email has failed. Please contact testbed ops.\n";
	    }
	}
	$sth->finish;
    }
    else
    {
	# Join user to the project
	$cmd = "mrg update member project $proj $username";
	$result = system($cmd);
	if ($result != 0)
	{
	    print "Membership update for project $proj and user $username failed\n";
	}
    }
    $sth->finish;
}
# Now create an XDC in that project if needed
# First create a config file
my $config = "$path/config";
my $admin=$opt{'clusterUser'};
open(my $oh, '>', $config) or die $!;
print $oh "
Host *
     IdentityFile $path/.ssh/merge_key
     ServerAliveInterval 30
     User $admin
     StrictHostKeyChecking no
     ProxyCommand ssh -o StrictHostKeyChecking=no -p 2022 -i ~/.ssh/merge_key -W %h:%p $admin\@jump.mod.deterlab.net";
close($oh);
my $outtries = 0;
my $success = 0;
while ($outtries < $RETRIES && $success == 0)
{
    $cmd="mrg list xdcs | grep xdc.$proj > /dev/null";
    $result=system($cmd);
    if ($result == 0)
    {
	my $retries = 30;

	if ($outtries == 0)
	{
	    $retries = 1;
	}
	# Try to contact XDC
	for (my $tries = 0; $tries < $retries; $tries++)
	{
	    print "Checking if the XDC is up ... this may take a few minutes\n";
	    $cmd = "sudo -H -u merge $SSH -F $mconfig xdc-$proj \"ls ~\" 2>&1 > /dev/null < /dev/null ";
	    $result=system($cmd);
	    if ($result != 0)
	    {
		sleep(1);		
	    }
	    else
	    {
		$success = 1;
		last;
	    }
	}
	if ($result != 0)
	{
	    print "XDC did not come up within prescribed time\n";
	    if ($outtries == 0)
	    {
		print "Dropping current XDC as non-responsive and recreating\n";
		$cmd="mrg delete xdc xdc.$proj";
		$result = system($cmd);
		sleep(10);
		$cmd="mrg new xdc xdc.$proj";
		$result = system($cmd);
	    }
	}

    }
    else
    {
	# XDC needs to be created
	print "Creating XDC xdc.$proj\n";
	$cmd="mrg new xdc xdc.$proj";
	$result=system($cmd);
	if ($result == 0)
	{
	    sleep(30);
	}
	else
	{
	    print "XDC creation has failed\n";
	    print "DONE";
	    exit 1;
	}
    }
    $outtries++;
}
my $running = 0;
my $reachable = 0;
my $custom = "";
my $uploadspath = "";
my $topofile = "";
if ($success == 1)
{
    if ($vmtype eq "file")
    {
	# There is a custom topology, parse out the nodes and put them into nodes file
	$uploadspath=$opt{'webpath'} . "/uploads";
	$topofile =  $uploadspath . "/" . $vmtype . ".$proj.model";
	parsenodes($topofile);
	open(my $oh, ">", $uploadspath . "/" . $vmtype . ".$proj.nodes");
	for my $n (@nodes)
	{
	    print $oh "$n\n";
	}
	close($oh);
    }
    $outtries = 0;
    while ($outtries < $RETRIES)
    {
	print "XDC exists and is running, we will now try to contact the VM\n";
	my $xdccmd="ping -c 1 $node";
	$cmd = "sudo -H -u merge $SSH -F $mconfig xdc-$proj \"$xdccmd\"";
	open(my $cmdh, " $cmd | ");
	my $output = "";
	while (<$cmdh>)
	{
	    $output .= $_;
	}
	if ($output ne "")
	{
	    print "Experiment is running and reachable\n";
	    $running = 1;
	    $reachable = 1;
	    last;
	}
	else
	{
	    print "Checking if materialization exists\n";
	    $cmd = "mrg show materialization real.$vmtype.$proj -j";
	    $output = `$cmd`;
	    if ($output =~ /\"HighestStatus\"\:\s+\"Success\"/)
	    {
		print "Experiment is running, will try to detach and reattach the XDC\n";
		$running = 1;
	    }
	    else
	    {
		# Check if we have a custom topology
		my $modelpath = "";
		if ($vmtype eq "file")
		{
		    	$cmd = "mrg xdc scp upload " . $uploadspath . "/" . $vmtype . ".$proj.model xdc.$proj:.";
			print $cmd;
			$result=system($cmd);
			if ($result != 0)
			{
			    print "Could not upload the custom topology $vmtype.$proj.model to the testbed\n";
			    print "DONE";
			    exit 1;
			}
			# Assume second upload will work
			$cmd = "mrg xdc scp upload " . $uploadspath . "/" . $vmtype . ".$proj.nodes xdc.$proj:.";
			$result=system($cmd);
			$custom="-n /home/$admin/$vmtype.$proj.nodes";
			$modelpath = "/home/$admin/$vmtype.$proj.model";
		}
		else
		{
		    $modelpath = "/share/EAC/$vmtype/$vmtype.model";
		}
		# Try to start the experiment                                                                                                                                                                                         
		my $xdccmd="/share/staging/startexp -p $proj -n $vmtype -m $modelpath $vmtype";
		$cmd = "sudo -H -u merge $SSH -F $mconfig xdc-$proj \"$xdccmd\"";
		$result=system($cmd);
		if ($result == 0)
		{
		    print "Experiment is now running\n";
		    $running = 1;
		    # Insert info into DB            
		    my $sth = $dbh->prepare(
			'SELECT * FROM VMs WHERE vmid = ?')
			or die "prepare statement failed: $dbh->errstr()";
		    $sth->execute("$vmid") or die "execution failed: $dbh->errstr()";
		    # If VM doesn't exist, insert info	 
		    if ($sth->rows == 0)
		    {
			$vncpass = substr(randompass(), 0, 8);
			$sth = $dbh->prepare(
			    'INSERT INTO VMs(vmid, vmtype, VNCpass, vmdesc, paperId) values (?, ?, ?, ?, ?)')
			    or die "prepare statement failed: $dbh->errstr()";
			my $vmdesc = "";
			if ($vmtype eq "file")
			{
			    $vmdesc="Custom topology";
			}
			else
			{
			    $vmdesc = $vms{$vmtype};
			    push(@nodes, $node);
			}
			
			$sth->bind_param(1, $vmid);
			$sth->bind_param(2, $vmtype);
			$sth->bind_param(3, $vncpass);	
			$sth->bind_param(4, $vmdesc);
			$sth->bind_param(5, $paperID);
			$sth->execute or die "execution failed: $dbh->errstr()";
			$sth->finish;
			# Remember all the nodes that a user could access
			for my $n (@nodes)
			{
			    $sth = $dbh->prepare(
				'INSERT INTO VMnodes(vmid, node) values (?, ?)')
				or die "prepare statement failed: $dbh->errstr()";
			    $sth->bind_param(1, $vmid);
			    $sth->bind_param(2, $n);
			    $sth->execute or die "execution failed: $dbh->errstr()";		
			    $sth->finish;
			}
		    }
		    for (my $i = 3; $i <= $#ARGV; $i++)
		    {
			my $id = $ARGV[$i];
			
			# Check if we need to insert into access                                                                                           
			my $sth = $dbh->prepare(
			    'SELECT * FROM VMaccess WHERE vmid = ? AND contactID = ?')
			    or die "prepare statement failed: $dbh->errstr()";
			$sth->bind_param(1, "$vmid");
			$sth->bind_param(2, $id);
			$sth->execute or die "execution failed: $dbh->errstr()";
			$sth->finish;
			
			if ($sth->rows == 0)
			{
			    
			    $sth = $dbh->prepare(
				'INSERT INTO VMaccess (vmid, contactId) values (?, ?)')
				or die "prepare statement failed: $dbh->errstr()";
			    $sth->bind_param(1, "$vmid");
			    $sth->bind_param(2, $id);
			    $sth->execute or die "execution failed: $dbh->errstr()";
			    $sth->finish;
			    # Also reserve ports
			    for my $n (@nodes)
			    {
				$sth = $dbh->prepare(
				    'INSERT INTO Ports (vmid, contactId, node) values (?, ?, ?)')
				    or die "prepare statement failed: $dbh->errstr()";
				$sth->bind_param(1, "$vmid");
				$sth->bind_param(2, $id);
				$sth->bind_param(3, $n);
				$sth->execute or die "execution failed: $dbh->errstr()";
				$sth->finish;
			    }
			}
		    }
		}
		else
		{
		    print "Start experiment failed, will try again\n";
		    
		}
	    }	    
	}
	if ($running == 1 && $reachable == 0)
	{
	    print "Detaching XDC\n";
	    $cmd = "mrg xdc detach xdc.$proj";
	    $result=system($cmd);
	    print "Reattaching XDC\n";
	    $cmd = "mrg xdc attach xdc.$proj real.$vmtype.$proj";
	    $result=system($cmd);
	    if ($result == 0)
	    {
		print "Will sleep for a minute\n";
		sleep 60;
	    }
	}
	$outtries++;
    }
    if ($reachable == 1)
    {
	# Now run runlab
	# Check if there is vncpass we should reuse
	$sth = $dbh->prepare(
	    'SELECT VNCpass FROM VMs WHERE vmid = ?')
	    or die "prepare statement failed: $dbh->errstr()";
	$sth->execute("$vmid") or die "execution failed: $dbh->errstr()";
	if ($sth->rows > 0)
	{			    
	    while (my $ref = $sth->fetchrow_hashref()) {
		$vncpass = $ref->{'VNCpass'};
	    }
	}
	print "Setting up experiment\n";
	if ($vmtype eq "file")
	{
	    $cmd = "mrg xdc scp upload " . $uploadspath . "/" . $vmtype . ".$proj.nodes xdc.$proj:.";
	    $result=system($cmd);
	    $custom="-n /home/$admin/$vmtype.$proj.nodes";
	}
	$cmd = "sudo -H -u merge $SSH -F $mconfig xdc-$proj \"/share/staging/runlab -f /share/EAC $custom -v $vncpass $vmtype\" 2>&1 < /dev/null ";
	$result=system($cmd);
	if ($result != 0)
	{
	    print "Something failed in experiment setup\n";
	    print "DONE\n";
	    exit 1;
	}
	else
	{
	    print "Experiment has been set up\n";
	    print "DONE";
	    exit 0;
	}
    }
}
else
{
    print "Failed to instantiate XDC\n";
}
print "DONE";
